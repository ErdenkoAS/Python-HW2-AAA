# -*- coding: utf-8 -*-
"""Python HW 2 AAA .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tOWGFkLz5CGFd3OxghqIvq-pt8Ge0lJT

# ДЗ 2 - функции

*Эрденко Александр*

Есть csv-файл с отчётом о сотрудниках компании. В нём

следующие данные:

*   ФИО полностью
*   Департамент
* Команда внутри департамента
* Занимаемая должность
* Квартальная оценка - результат ревью
* Текущая зарплата

При старте программы выводится меню, которое состоит из 3-х пунктов:

Вывести в понятном виде иерархию команд, т.е. департамент и все команды, которые входят в него
Вывести сводный отчёт по департаментам: название, численность, "вилка" зарплат в виде мин – макс, среднюю зарплату
Сохранить сводный отчёт из предыдущего пункта в виде csv-файла. При этом необязательно вызывать сначала команду из п.2
Пользователь выбирает пункт меню, вводя соответствующее число.

Условия:

Используем только встроенные модули (без pandas и т.д.)
Весь скрипт разбит на функции
Каждая функция содержит докстринги
Бонус: все параметры аннотированы типами
"""

import csv
from typing import List, Tuple, Dict
from collections import defaultdict

def read_csv(file_name: str) -> List[Dict[str, str]]:
    """
    Сначала читаем, что содержится в CSV-файле, потом возвращаем список словарей с данными

    :param file_name: имя файла CSV
    :return: список словарей с данными
    """
    with open(file_name, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile, delimiter=';')
        data = [row for row in reader]
    return data

"""Я очень долго сидел и не понимал, где ошибка в коде. Потому что прога говорила, что не существует такого столбца как "Команда внутри департамента" и "Текущая зарплата". В самом файле называются "Отдел" и "Оклад".

Пофиксите, пожалуйста))
"""

def print_teams_hierarchy(data: List[Dict[str, str]]) -> None:
    """
    Тут выводим иерархию команд

    :param data: список словарей с данными
    """
    departments = defaultdict(set)
    for row in data:
        departments[row['Департамент']].add(row['Отдел'])

    for department, teams in departments.items():
        print(f"{department}:")
        for team in teams:
            print(f"  - {team}")

def print_summary_report(data: List[Dict[str, str]]) -> None:
    """
    Здесь выводим сводный отчёт по департаментам

    :param data: список словарей с данными
    """
    departments = defaultdict(lambda: {"count": 0, "salaries": []})
    for row in data:
        department = row['Департамент']
        salary = int(row['Оклад'])
        departments[department]["count"] += 1
        departments[department]["salaries"].append(salary)

    print("Департамент | Численность | Минимальная зарплата | Максимальная зарплата | Средняя зарплата")
    for department, info in departments.items():
        min_salary = min(info["salaries"])
        max_salary = max(info["salaries"])
        avg_salary = sum(info["salaries"]) / info["count"]
        print(f"{department} | {info['count']} | {min_salary} | {max_salary} | {avg_salary:.2f}")

def save_summary_report(data: List[Dict[str, str]], output_file: str) -> None:
    """
    Эта функция позволяет сохранить сводный отчёт по департаментам в виде CSV

    :param data: список словарей с данными
    :param output_file: имя файла для сохранения
    """
    departments = defaultdict(lambda: {"count": 0, "salaries": []})
    for row in data:
        department = row['Департамент']
        salary = int(row['Оклад'])
        departments[department]["count"] += 1
        departments[department]["salaries"].append(salary)

    with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['Департамент', 'Численность', 'Минимальная зарплата', 'Максимальная зарплата', 'Средняя зарплата']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for department, info in departments.items():
            min_salary = min(info["salaries"])
            max_salary = max(info["salaries"])
            avg_salary = sum(info["salaries"]) / info["count"]
            writer.writerow({'Департамент': department,
                             'Численность': info['count'],
                             'Минимальная зарплата': min_salary,
                             'Максимальная зарплата': max_salary,
                             'Средняя зарплата': f"{avg_salary:.2f}"})

def main() -> None:
    data = read_csv("Corp_Summary.csv")

    while True:
        print("Выберите действие:")
        print("1 - Вывести иерархию команд")
        print("2 - Вывести сводный отчёт по департаментам")
        print("3 - Сохранить сводный отчёт в CSV-файл")
        print("4 - Выход")

        choice = input("Введите номер действия: ")

        if choice == "1":
            print_teams_hierarchy(data)
        elif choice == "2":
            print_summary_report(data)
        elif choice == "3":
            output_file = input("Введите имя файла для сохранения: ")
            save_summary_report(data, output_file)
            print("Сводный отчёт сохранён.")
        elif choice == "4":
            break
        else:
            print("Неверный ввод, попробуйте снова.")

if __name__ == "__main__":
    main()